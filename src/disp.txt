func display_text_buffer() {
  var row, col int
  for row = 0; row < ROWS; row++ {
    text_buffer_row := row + offset_row
    for col = 0; col < COLS; col++ {
      text_buffer_col := col + offset_col
      if text_buffer_row < len(text_buffer) {
        line_number_offset := line_number_width - len(strconv.Itoa(text_buffer_row+1))-1
        print_message(line_number_offset, row,
        termbox.ColorCyan, termbox.ColorDefault, strconv.Itoa(text_buffer_row+1))
      };if text_buffer_row >= 0 &&  text_buffer_row < len(text_buffer) &&
         text_buffer_col < len(text_buffer[text_buffer_row]) {
        if text_buffer[text_buffer_row][text_buffer_col] != rune('\t') {
          if highlight == 1 { highlight_syntax(&col, row, text_buffer_col, text_buffer_row)
          } else { termbox.SetCell(col+line_number_width, row, text_buffer[text_buffer_row][text_buffer_col],
                   termbox.ColorDefault, termbox.ColorDefault) }
        } else { termbox.SetCell(col+line_number_width, row, rune(' '), termbox.ColorDefault, termbox.ColorGreen) }
      } else if row+offset_row > len(text_buffer)-1 {
    termbox.SetCell(0, row, '*', termbox.ColorBlue, termbox.ColorDefault)}}
    if row == current_row - offset_row && highlight == 1 {
      COLS, ROWS := termbox.Size(); ROWS--
      if row >= ROWS { continue }
      for col = 0; col < COLS; col++ {
        current_cell := termbox.GetCell(col, row)
        termbox.SetCell(col, row, current_cell.Ch, termbox.ColorDefault, termbox.ColorBlue)
      }
    }
    termbox.SetChar(col, row, '\n')
  }
}
